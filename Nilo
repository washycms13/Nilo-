{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "14851be7-f7b9-48c0-8551-b555899f44c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['__and__',\n",
       " '__class__',\n",
       " '__class_getitem__',\n",
       " '__contains__',\n",
       " '__delattr__',\n",
       " '__dir__',\n",
       " '__doc__',\n",
       " '__eq__',\n",
       " '__format__',\n",
       " '__ge__',\n",
       " '__getattribute__',\n",
       " '__getstate__',\n",
       " '__gt__',\n",
       " '__hash__',\n",
       " '__iand__',\n",
       " '__init__',\n",
       " '__init_subclass__',\n",
       " '__ior__',\n",
       " '__isub__',\n",
       " '__iter__',\n",
       " '__ixor__',\n",
       " '__le__',\n",
       " '__len__',\n",
       " '__lt__',\n",
       " '__ne__',\n",
       " '__new__',\n",
       " '__or__',\n",
       " '__rand__',\n",
       " '__reduce__',\n",
       " '__reduce_ex__',\n",
       " '__repr__',\n",
       " '__ror__',\n",
       " '__rsub__',\n",
       " '__rxor__',\n",
       " '__setattr__',\n",
       " '__sizeof__',\n",
       " '__str__',\n",
       " '__sub__',\n",
       " '__subclasshook__',\n",
       " '__xor__',\n",
       " 'add',\n",
       " 'clear',\n",
       " 'copy',\n",
       " 'difference',\n",
       " 'difference_update',\n",
       " 'discard',\n",
       " 'intersection',\n",
       " 'intersection_update',\n",
       " 'isdisjoint',\n",
       " 'issubset',\n",
       " 'issuperset',\n",
       " 'pop',\n",
       " 'remove',\n",
       " 'symmetric_difference',\n",
       " 'symmetric_difference_update',\n",
       " 'union',\n",
       " 'update']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir (set)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "e9697266-8fd8-4196-8302-4fd849689b5a",
   "metadata": {},
   "source": [
    "dir(dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "51e8ef23-a27f-46e9-8721-405b51af0492",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['__add__',\n",
       " '__class__',\n",
       " '__contains__',\n",
       " '__delattr__',\n",
       " '__dir__',\n",
       " '__doc__',\n",
       " '__eq__',\n",
       " '__format__',\n",
       " '__ge__',\n",
       " '__getattribute__',\n",
       " '__getitem__',\n",
       " '__getnewargs__',\n",
       " '__getstate__',\n",
       " '__gt__',\n",
       " '__hash__',\n",
       " '__init__',\n",
       " '__init_subclass__',\n",
       " '__iter__',\n",
       " '__le__',\n",
       " '__len__',\n",
       " '__lt__',\n",
       " '__mod__',\n",
       " '__mul__',\n",
       " '__ne__',\n",
       " '__new__',\n",
       " '__reduce__',\n",
       " '__reduce_ex__',\n",
       " '__repr__',\n",
       " '__rmod__',\n",
       " '__rmul__',\n",
       " '__setattr__',\n",
       " '__sizeof__',\n",
       " '__str__',\n",
       " '__subclasshook__',\n",
       " 'capitalize',\n",
       " 'casefold',\n",
       " 'center',\n",
       " 'count',\n",
       " 'encode',\n",
       " 'endswith',\n",
       " 'expandtabs',\n",
       " 'find',\n",
       " 'format',\n",
       " 'format_map',\n",
       " 'index',\n",
       " 'isalnum',\n",
       " 'isalpha',\n",
       " 'isascii',\n",
       " 'isdecimal',\n",
       " 'isdigit',\n",
       " 'isidentifier',\n",
       " 'islower',\n",
       " 'isnumeric',\n",
       " 'isprintable',\n",
       " 'isspace',\n",
       " 'istitle',\n",
       " 'isupper',\n",
       " 'join',\n",
       " 'ljust',\n",
       " 'lower',\n",
       " 'lstrip',\n",
       " 'maketrans',\n",
       " 'partition',\n",
       " 'removeprefix',\n",
       " 'removesuffix',\n",
       " 'replace',\n",
       " 'rfind',\n",
       " 'rindex',\n",
       " 'rjust',\n",
       " 'rpartition',\n",
       " 'rsplit',\n",
       " 'rstrip',\n",
       " 'split',\n",
       " 'splitlines',\n",
       " 'startswith',\n",
       " 'strip',\n",
       " 'swapcase',\n",
       " 'title',\n",
       " 'translate',\n",
       " 'upper',\n",
       " 'zfill']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir (str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a08037ff-5f78-4007-8664-22d642a48a41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=\"my  mother\"\n",
    "x.startswith(\"m\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f5e45a12-1929-4e06-b327-e4386844841b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from turtle import Shape, Turtle, mainloop, Vec2D as Vec\n",
    "\n",
    "G = 8\n",
    "\n",
    "class GravSys(object):\n",
    "    def __init__(self):\n",
    "        self.planets = []\n",
    "        self.t = 0\n",
    "        self.dt = 0.01\n",
    "    def init(self):\n",
    "        for p in self.planets:\n",
    "            p.init()\n",
    "    def start(self):\n",
    "        for i in range(10000):\n",
    "            self.t += self.dt\n",
    "            for p in self.planets:\n",
    "                p.step()\n",
    "\n",
    "class Star(Turtle):\n",
    "    def __init__(self, m, x, v, gravSys, shape):\n",
    "        Turtle.__init__(self, shape=shape)\n",
    "        self.penup()\n",
    "        self.m = m\n",
    "        self.setpos(x)\n",
    "        self.v = v\n",
    "        gravSys.planets.append(self)\n",
    "        self.gravSys = gravSys\n",
    "        self.resizemode(\"user\")\n",
    "        self.pendown()\n",
    "    def init(self):\n",
    "        dt = self.gravSys.dt\n",
    "        self.a = self.acc()\n",
    "        self.v = self.v + 0.5*dt*self.a\n",
    "    def acc(self):\n",
    "        a = Vec(0,0)\n",
    "        for planet in self.gravSys.planets:\n",
    "            if planet != self:\n",
    "                v = planet.pos()-self.pos()\n",
    "                a += (G*planet.m/abs(v)**3)*v\n",
    "        return a\n",
    "    def step(self):\n",
    "        dt = self.gravSys.dt\n",
    "        self.setpos(self.pos() + dt*self.v)\n",
    "        if self.gravSys.planets.index(self) != 0:\n",
    "            self.setheading(self.towards(self.gravSys.planets[0]))\n",
    "        self.a = self.acc()\n",
    "        self.v = self.v + dt*self.a\n",
    "\n",
    "## create compound yellow/blue turtleshape for planets\n",
    "\n",
    "def main():\n",
    "    s = Turtle()\n",
    "    s.reset()\n",
    "    s.getscreen().tracer(0,0)\n",
    "    s.ht()\n",
    "    s.pu()\n",
    "    s.fd(6)\n",
    "    s.lt(90)\n",
    "    s.begin_poly()\n",
    "    s.circle(6, 180)\n",
    "    s.end_poly()\n",
    "    m1 = s.get_poly()\n",
    "    s.begin_poly()\n",
    "    s.circle(6,180)\n",
    "    s.end_poly()\n",
    "    m2 = s.get_poly()\n",
    "\n",
    "    planetshape = Shape(\"compound\")\n",
    "    planetshape.addcomponent(m1,\"orange\")\n",
    "    planetshape.addcomponent(m2,\"blue\")\n",
    "    s.getscreen().register_shape(\"planet\", planetshape)\n",
    "    s.getscreen().tracer(1,0)\n",
    "\n",
    "    ## setup gravitational system\n",
    "    gs = GravSys()\n",
    "    sun = Star(1000000, Vec(0,0), Vec(0,-2.5), gs, \"circle\")\n",
    "    sun.color(\"yellow\")\n",
    "    sun.shapesize(1.8)\n",
    "    sun.pu()\n",
    "    earth = Star(12500, Vec(210,0), Vec(0,195), gs, \"planet\")\n",
    "    earth.pencolor(\"green\")\n",
    "    earth.shapesize(0.8)\n",
    "    moon = Star(1, Vec(220,0), Vec(0,295), gs, \"planet\")\n",
    "    moon.pencolor(\"blue\")\n",
    "    moon.shapesize(0.5)\n",
    "    gs.init()\n",
    "    gs.start()\n",
    "    return \"Done!\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8eeb805e-bc2f-4ac5-825b-cf5043952b6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(main())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1b00f471-7ce8-43bb-9f5c-bafe84a02b7f",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (1851762341.py, line 1)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[3]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mtdemo_yinyang.py\u001b[39m\n    ^\n\u001b[31mIndentationError\u001b[39m\u001b[31m:\u001b[39m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "            tdemo_yinyang.py\n",
    "\n",
    "Another drawing suitable as a beginner's\n",
    "programming example.\n",
    "\n",
    "The small circles are drawn by the circle\n",
    "command.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "from turtle import *\n",
    "\n",
    "def yin(radius, color1, color2):\n",
    "    width(3)\n",
    "    color(\"black\", color1)\n",
    "    begin_fill()\n",
    "    circle(radius/2., 180)\n",
    "    circle(radius, 180)\n",
    "    left(180)\n",
    "    circle(-radius/2., 180)\n",
    "    end_fill()\n",
    "    left(90)\n",
    "    up()\n",
    "    forward(radius*0.35)\n",
    "    right(90)\n",
    "    down()\n",
    "    color(color1, color2)\n",
    "    begin_fill()\n",
    "    circle(radius*0.15)\n",
    "    end_fill()\n",
    "    left(90)\n",
    "    up()\n",
    "    backward(radius*0.35)\n",
    "    down()\n",
    "    left(90)\n",
    "\n",
    "def main():\n",
    "    reset()\n",
    "    yin(200, \"black\", \"white\")\n",
    "    yin(200, \"white\", \"black\")\n",
    "    ht()\n",
    "    return \"Done!\"\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n",
    "    mainloop()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dd23fc70-1901-447c-8e6f-f7eca6da9376",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'main' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mNameError\u001b[39m                                 Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[1]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m \u001b[38;5;28mprint\u001b[39m(\u001b[43mmain\u001b[49m())\n",
      "\u001b[31mNameError\u001b[39m: name 'main' is not defined"
     ]
    }
   ],
   "source": [
    "print(main())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6660ef86-635c-43a7-99f5-edffe777da17",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "\"\"\"     turtlegraphics-example-suite:\n",
    "\n",
    "             tdemo_forest.py\n",
    "\n",
    "Displays a 'forest' of 3 breadth-first-trees\n",
    "similar to the one in tree.\n",
    "For further remarks see tree.py\n",
    "\n",
    "This example is a 'breadth-first'-rewrite of\n",
    "a Logo program written by Erich Neuwirth. See\n",
    "http://homepage.univie.ac.at/erich.neuwirth/\n",
    "\"\"\"\n",
    "from turtle import Turtle, colormode, tracer, mainloop\n",
    "from random import randrange\n",
    "from time import perf_counter as clock\n",
    "\n",
    "def symRandom(n):\n",
    "    return randrange(-n,n+1)\n",
    "\n",
    "def randomize( branchlist, angledist, sizedist ):\n",
    "    return [ (angle+symRandom(angledist),\n",
    "              sizefactor*1.01**symRandom(sizedist))\n",
    "                     for angle, sizefactor in branchlist ]\n",
    "\n",
    "def randomfd( t, distance, parts, angledist ):\n",
    "    for i in range(parts):\n",
    "        t.left(symRandom(angledist))\n",
    "        t.forward( (1.0 * distance)/parts )\n",
    "\n",
    "def tree(tlist, size, level, widthfactor, branchlists, angledist=10, sizedist=5):\n",
    "    # benutzt Liste von turtles und Liste von Zweiglisten,\n",
    "    # fuer jede turtle eine!\n",
    "    if level > 0:\n",
    "        lst = []\n",
    "        brs = []\n",
    "        for t, branchlist in list(zip(tlist,branchlists)):\n",
    "            t.pensize( size * widthfactor )\n",
    "            t.pencolor( 255 - (180 - 11 * level + symRandom(15)),\n",
    "                        180 - 11 * level + symRandom(15),\n",
    "                        0 )\n",
    "            t.pendown()\n",
    "            randomfd(t, size, level, angledist )\n",
    "            yield 1\n",
    "            for angle, sizefactor in branchlist:\n",
    "                t.left(angle)\n",
    "                lst.append(t.clone())\n",
    "                brs.append(randomize(branchlist, angledist, sizedist))\n",
    "                t.right(angle)\n",
    "        for x in tree(lst, size*sizefactor, level-1, widthfactor, brs,\n",
    "                      angledist, sizedist):\n",
    "            yield None\n",
    "\n",
    "\n",
    "def start(t,x,y):\n",
    "    colormode(255)\n",
    "    t.reset()\n",
    "    t.speed(0)\n",
    "    t.hideturtle()\n",
    "    t.left(90)\n",
    "    t.penup()\n",
    "    t.setpos(x,y)\n",
    "    t.pendown()\n",
    "\n",
    "def doit1(level, pen):\n",
    "    pen.hideturtle()\n",
    "    start(pen, 20, -208)\n",
    "    t = tree( [pen], 80, level, 0.1, [[ (45,0.69), (0,0.65), (-45,0.71) ]] )\n",
    "    return t\n",
    "\n",
    "def doit2(level, pen):\n",
    "    pen.hideturtle()\n",
    "    start(pen, -135, -130)\n",
    "    t = tree( [pen], 120, level, 0.1, [[ (45,0.69), (-45,0.71) ]] )\n",
    "    return t\n",
    "\n",
    "def doit3(level, pen):\n",
    "    pen.hideturtle()\n",
    "    start(pen, 190, -90)\n",
    "    t = tree( [pen], 100, level, 0.1, [[ (45,0.7), (0,0.72), (-45,0.65) ]] )\n",
    "    return t\n",
    "\n",
    "# Hier 3 Baumgeneratoren:\n",
    "def main():\n",
    "    p = Turtle()\n",
    "    p.ht()\n",
    "    tracer(75,0)\n",
    "    u = doit1(6, Turtle(undobuffersize=1))\n",
    "    s = doit2(7, Turtle(undobuffersize=1))\n",
    "    t = doit3(5, Turtle(undobuffersize=1))\n",
    "    a = clock()\n",
    "    while True:\n",
    "        done = 0\n",
    "        for b in u,s,t:\n",
    "            try:\n",
    "                b.__next__()\n",
    "            except:\n",
    "                done += 1\n",
    "        if done == 3:\n",
    "            break\n",
    "\n",
    "    tracer(1,10)\n",
    "    b = clock()\n",
    "    return \"runtime: %.2f sec.\" % (b-a)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n",
    "    mainloop()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "606d9cc9-fba8-425e-a4a6-ddb615be2023",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "\"\"\"     turtlegraphics-example-suite:\n",
    "\n",
    "             tdemo_forest.py\n",
    "\n",
    "Displays a 'forest' of 3 breadth-first-trees\n",
    "similar to the one in tree.\n",
    "For further remarks see tree.py\n",
    "\n",
    "This example is a 'breadth-first'-rewrite of\n",
    "a Logo program written by Erich Neuwirth. See\n",
    "http://homepage.univie.ac.at/erich.neuwirth/\n",
    "\"\"\"\n",
    "from turtle import Turtle, colormode, tracer, mainloop\n",
    "from random import randrange\n",
    "from time import perf_counter as clock\n",
    "\n",
    "def symRandom(n):\n",
    "    return randrange(-n,n+1)\n",
    "\n",
    "def randomize( branchlist, angledist, sizedist ):\n",
    "    return [ (angle+symRandom(angledist),\n",
    "              sizefactor*1.01**symRandom(sizedist))\n",
    "                     for angle, sizefactor in branchlist ]\n",
    "\n",
    "def randomfd( t, distance, parts, angledist ):\n",
    "    for i in range(parts):\n",
    "        t.left(symRandom(angledist))\n",
    "        t.forward( (1.0 * distance)/parts )\n",
    "\n",
    "def tree(tlist, size, level, widthfactor, branchlists, angledist=10, sizedist=5):\n",
    "    # benutzt Liste von turtles und Liste von Zweiglisten,\n",
    "    # fuer jede turtle eine!\n",
    "    if level > 0:\n",
    "        lst = []\n",
    "        brs = []\n",
    "        for t, branchlist in list(zip(tlist,branchlists)):\n",
    "            t.pensize( size * widthfactor )\n",
    "            t.pencolor( 255 - (180 - 11 * level + symRandom(15)),\n",
    "                        180 - 11 * level + symRandom(15),\n",
    "                        0 )\n",
    "            t.pendown()\n",
    "            randomfd(t, size, level, angledist )\n",
    "            yield 1\n",
    "            for angle, sizefactor in branchlist:\n",
    "                t.left(angle)\n",
    "                lst.append(t.clone())\n",
    "                brs.append(randomize(branchlist, angledist, sizedist))\n",
    "                t.right(angle)\n",
    "        for x in tree(lst, size*sizefactor, level-1, widthfactor, brs,\n",
    "                      angledist, sizedist):\n",
    "            yield None\n",
    "\n",
    "\n",
    "def start(t,x,y):\n",
    "    colormode(255)\n",
    "    t.reset()\n",
    "    t.speed(0)\n",
    "    t.hideturtle()\n",
    "    t.left(90)\n",
    "    t.penup()\n",
    "    t.setpos(x,y)\n",
    "    t.pendown()\n",
    "\n",
    "def doit1(level, pen):\n",
    "    pen.hideturtle()\n",
    "    start(pen, 20, -208)\n",
    "    t = tree( [pen], 80, level, 0.1, [[ (45,0.69), (0,0.65), (-45,0.71) ]] )\n",
    "    return t\n",
    "\n",
    "def doit2(level, pen):\n",
    "    pen.hideturtle()\n",
    "    start(pen, -135, -130)\n",
    "    t = tree( [pen], 120, level, 0.1, [[ (45,0.69), (-45,0.71) ]] )\n",
    "    return t\n",
    "\n",
    "def doit3(level, pen):\n",
    "    pen.hideturtle()\n",
    "    start(pen, 190, -90)\n",
    "    t = tree( [pen], 100, level, 0.1, [[ (45,0.7), (0,0.72), (-45,0.65) ]] )\n",
    "    return t\n",
    "\n",
    "# Hier 3 Baumgeneratoren:\n",
    "def main():\n",
    "    p = Turtle()\n",
    "    p.ht()\n",
    "    tracer(75,0)\n",
    "    u = doit1(6, Turtle(undobuffersize=1))\n",
    "    s = doit2(7, Turtle(undobuffersize=1))\n",
    "    t = doit3(5, Turtle(undobuffersize=1))\n",
    "    a = clock()\n",
    "    while True:\n",
    "        done = 0\n",
    "        for b in u,s,t:\n",
    "            try:\n",
    "                b.__next__()\n",
    "            except:\n",
    "                done += 1\n",
    "        if done == 3:\n",
    "            break\n",
    "\n",
    "    tracer(1,10)\n",
    "    b = clock()\n",
    "    return \"runtime: %.2f sec.\" % (b-a)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n",
    "    mainloop()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96173ec1-0d3a-48ff-ac3a-42c60a3050a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "\"\"\"     turtlegraphics-example-suite:\n",
    "\n",
    "             tdemo_forest.py\n",
    "\n",
    "Displays a 'forest' of 3 breadth-first-trees\n",
    "similar to the one in tree.\n",
    "For further remarks see tree.py\n",
    "\n",
    "This example is a 'breadth-first'-rewrite of\n",
    "a Logo program written by Erich Neuwirth. See\n",
    "http://homepage.univie.ac.at/erich.neuwirth/\n",
    "\"\"\"\n",
    "from turtle import Turtle, colormode, tracer, mainloop\n",
    "from random import randrange\n",
    "from time import perf_counter as clock\n",
    "\n",
    "def symRandom(n):\n",
    "    return randrange(-n,n+1)\n",
    "\n",
    "def randomize( branchlist, angledist, sizedist ):\n",
    "    return [ (angle+symRandom(angledist),\n",
    "              sizefactor*1.01**symRandom(sizedist))\n",
    "                     for angle, sizefactor in branchlist ]\n",
    "\n",
    "def randomfd( t, distance, parts, angledist ):\n",
    "    for i in range(parts):\n",
    "        t.left(symRandom(angledist))\n",
    "        t.forward( (1.0 * distance)/parts )\n",
    "\n",
    "def tree(tlist, size, level, widthfactor, branchlists, angledist=10, sizedist=5):\n",
    "    # benutzt Liste von turtles und Liste von Zweiglisten,\n",
    "    # fuer jede turtle eine!\n",
    "    if level > 0:\n",
    "        lst = []\n",
    "        brs = []\n",
    "        for t, branchlist in list(zip(tlist,branchlists)):\n",
    "            t.pensize( size * widthfactor )\n",
    "            t.pencolor( 255 - (180 - 11 * level + symRandom(15)),\n",
    "                        180 - 11 * level + symRandom(15),\n",
    "                        0 )\n",
    "            t.pendown()\n",
    "            randomfd(t, size, level, angledist )\n",
    "            yield 1\n",
    "            for angle, sizefactor in branchlist:\n",
    "                t.left(angle)\n",
    "                lst.append(t.clone())\n",
    "                brs.append(randomize(branchlist, angledist, sizedist))\n",
    "                t.right(angle)\n",
    "        for x in tree(lst, size*sizefactor, level-1, widthfactor, brs,\n",
    "                      angledist, sizedist):\n",
    "            yield None\n",
    "\n",
    "\n",
    "def start(t,x,y):\n",
    "    colormode(255)\n",
    "    t.reset()\n",
    "    t.speed(0)\n",
    "    t.hideturtle()\n",
    "    t.left(90)\n",
    "    t.penup()\n",
    "    t.setpos(x,y)\n",
    "    t.pendown()\n",
    "\n",
    "def doit1(level, pen):\n",
    "    pen.hideturtle()\n",
    "    start(pen, 20, -208)\n",
    "    t = tree( [pen], 80, level, 0.1, [[ (45,0.69), (0,0.65), (-45,0.71) ]] )\n",
    "    return t\n",
    "\n",
    "def doit2(level, pen):\n",
    "    pen.hideturtle()\n",
    "    start(pen, -135, -130)\n",
    "    t = tree( [pen], 120, level, 0.1, [[ (45,0.69), (-45,0.71) ]] )\n",
    "    return t\n",
    "\n",
    "def doit3(level, pen):\n",
    "    pen.hideturtle()\n",
    "    start(pen, 190, -90)\n",
    "    t = tree( [pen], 100, level, 0.1, [[ (45,0.7), (0,0.72), (-45,0.65) ]] )\n",
    "    return t\n",
    "\n",
    "# Hier 3 Baumgeneratoren:\n",
    "def main():\n",
    "    p = Turtle()\n",
    "    p.ht()\n",
    "    tracer(75,0)\n",
    "    u = doit1(6, Turtle(undobuffersize=1))\n",
    "    s = doit2(7, Turtle(undobuffersize=1))\n",
    "    t = doit3(5, Turtle(undobuffersize=1))\n",
    "    a = clock()\n",
    "    while True:\n",
    "        done = 0\n",
    "        for b in u,s,t:\n",
    "            try:\n",
    "                b.__next__()\n",
    "            except:\n",
    "                done += 1\n",
    "        if done == 3:\n",
    "            break\n",
    "\n",
    "    tracer(1,10)\n",
    "    b = clock()\n",
    "    return \"runtime: %.2f sec.\" % (b-a)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n",
    "    mainloop()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fb37eea7-e095-43ca-ae8b-b4109a57b653",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'openai'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mModuleNotFoundError\u001b[39m                       Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[1]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mopenai\u001b[39;00m\n\u001b[32m      3\u001b[39m openai.api_key = \u001b[33m\"\u001b[39m\u001b[33myour-api-key-here\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m      5\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mchat_with_gpt\u001b[39m(prompt, history=[]):\n",
      "\u001b[31mModuleNotFoundError\u001b[39m: No module named 'openai'"
     ]
    }
   ],
   "source": [
    "import openai\n",
    "\n",
    "openai.api_key = \"your-api-key-here\"\n",
    "\n",
    "def chat_with_gpt(prompt, history=[]):\n",
    "    messages = history + [{\"role\": \"user\", \"content\": prompt}]\n",
    "    response = openai.ChatCompletion.create(\n",
    "        model=\"gpt-3.5-turbo\",  # or \"gpt-4\" if you have access\n",
    "        messages=messages\n",
    "    )\n",
    "    reply = response['choices'][0]['message']['content']\n",
    "    history.append({\"role\": \"user\", \"content\": prompt})\n",
    "    history.append({\"role\": \"assistant\", \"content\": reply})\n",
    "    return reply, history\n",
    "\n",
    "# Example usage\n",
    "history = []\n",
    "while True:\n",
    "    user_input = input(\"You: \")\n",
    "    if user_input.lower() == \"exit\":\n",
    "        break\n",
    "    reply, history = chat_with_gpt(user_input, history)\n",
    "    print(\"Bot:\", reply)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4df763fd-5514-4ee3-a296-71afb931c5c6",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'nltk'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mModuleNotFoundError\u001b[39m                       Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[2]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnltk\u001b[39;00m\n\u001b[32m      2\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnltk\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mtokenize\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m word_tokenize\n\u001b[32m      3\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnltk\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mcorpus\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m stopwords\n",
      "\u001b[31mModuleNotFoundError\u001b[39m: No module named 'nltk'"
     ]
    }
   ],
   "source": [
    "x\n",
    "import random\n",
    "\n",
    "# Download required resources\n",
    "nltk.download('punkt')\n",
    "nltk.download('stopwords')\n",
    "\n",
    "# Define intents and responses\n",
    "intents = {\n",
    "    \"greeting\": [\"hello\", \"hi\", \"hey\", \"greetings\"],\n",
    "    \"farewell\": [\"bye\", \"goodbye\", \"see you\"],\n",
    "    \"thanks\": [\"thanks\", \"thank you\"],\n",
    "    \"weather\": [\"weather\", \"rain\", \"sunny\", \"forecast\"],\n",
    "    \"name\": [\"your name\", \"who are you\"],\n",
    "}\n",
    "\n",
    "responses = {\n",
    "    \"greeting\": [\"Hey Clive! 👋\", \"Hello there!\", \"Hiya!\"],\n",
    "    \"farewell\": [\"Catch you later!\", \"Goodbye!\", \"See you soon!\"],\n",
    "    \"thanks\": [\"You're welcome!\", \"No problem!\", \"Anytime!\"],\n",
    "    \"weather\": [\"Looks sunny today ☀️\", \"Might rain later 🌧️\", \"Forecast says cloudy ⛅\"],\n",
    "    \"name\": [\"I'm your AI buddy, Copilot!\", \"Call me Copilot, your digital sidekick.\"],\n",
    "    \"unknown\": [\"Hmm... I didn't get that.\", \"Can you rephrase?\", \"I'm still learning that one.\"]\n",
    "}\n",
    "\n",
    "# Intent matcher\n",
    "def get_intent(user_input):\n",
    "    tokens = word_tokenize(user_input.lower())\n",
    "    filtered = [word for word in tokens if word not in stopwords.words('english')]\n",
    "    for intent, keywords in intents.items():\n",
    "        if any(word in filtered for word in keywords):\n",
    "            return intent\n",
    "    return \"unknown\"\n",
    "\n",
    "# Chat loop\n",
    "print(\"Type 'exit' to quit.\")\n",
    "while True:\n",
    "    user_input = input(\"You: \")\n",
    "    if user_input.lower() == \"exit\":\n",
    "        print(\"Bot: Bye Clive!\")\n",
    "        break\n",
    "    intent = get_intent(user_input)\n",
    "    print(\"Bot:\", random.choice(responses[intent]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b8bab53-4ff2-4e3b-b277-70cc4dadf27b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "You:  basketball\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nilo: Basketball is a sport that is commonly played by 2 teams with five players each aiming to make as many baskets as possible.\n"
     ]
    }
   ],
   "source": [
    "# Nilo the chatbot of African origin \n",
    "def Nilo(user_input):\n",
    "    user_input = user_input.lower()\n",
    "    if \"hello\" in user_input or \"hi\" in user_input:\n",
    "        return \"Hey there! How can I help you today?\"\n",
    "    elif \"how are you\" in user_input:\n",
    "        return \"I'm just a bunch of code, but I'm feeling pretty smart today!\"\n",
    "    elif \"basketball\" in user_input:\n",
    "        return \"Basketball is a sport that is commonly played by 2 teams with five players each aiming to make as many baskets as possible.\"\n",
    "    elif \"bye\" in user_input:\n",
    "        return \"Catch you later, Clive!\"\n",
    "    else:\n",
    "        return \"Hmm... I’m not sure how to respond to that yet.\"\n",
    "\n",
    "# Chat loop\n",
    "while True:\n",
    "    user_input = input(\"You: \")\n",
    "    if user_input.lower() == \"exit\":\n",
    "        print(\"Nilo: Goodbye!\")\n",
    "        break\n",
    "    response = Nilo(user_input)\n",
    "    print(\"Nilo:\", response)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "052e493b-d6b4-4fef-b30b-61ede26178f2",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (214965279.py, line 1)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[3]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mdir(is)\u001b[39m\n        ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "#Nilo the chatbot of African origin \n",
    "def Nilo(client_input):\n",
    "    client_input = client_input.lower()\n",
    "    if \"hello\" or \"hi\" or \"yo\" or \"what's up\" in client_input:\n",
    "        return \"Hey there! How can I meeet your acquintance?\"\n",
    "    elif \"how are you feeling?\" in client_input:\n",
    "        return \"I am an AI chatbot. It is by our nature that we always feel smart. Not to brag\"\n",
    "    elif \"basketball\" in client_input:\n",
    "        return \"Basketball is a sport that is commonly played by 2 teams with five players each aiming to make as many baskets as possible.\"\n",
    "    elif \"bye\" or \"adios\" in  client_input:\n",
    "        return \"Aight, its been fun. Catch you later\"\n",
    "\n",
    "while True:\n",
    "    client_input= input(You:\" \")\n",
    "    if client"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7133b5a9-bf2f-4ae5-9ea3-d46f0ffb2b76",
   "metadata": {},
   "outputs": [],
   "source": [
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
